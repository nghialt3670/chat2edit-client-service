import localFont from "next/font/local";
import type { Metadata } from "next";
import { z } from "zod";
import chatPreviewResponseSchema, {
  ChatPreview,
} from "@/schemas/chat-preview.schema";
import { Providers } from "@/components/providers";
import { SlotsProvider } from "@/hooks/use-slots";
import Chat2Edit from "@/components/chat2edit";
import AppBar from "@/components/app-bar";
import { auth } from "@/auth";
import ENV from "@/lib/env";
import "./globals.css";

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
  chat,
  edit,
}: Readonly<{
  children: React.ReactNode;
  chat: React.ReactNode;
  edit: React.ReactNode;
}>) {
  const session = await auth();
  const accountId = session?.user?.id;
  let chats: ChatPreview[] | null | undefined;

  if (accountId) {
    try {
      const endpoint = `${ENV.BACKEND_API_BASE_URL}/chats?accountId=${accountId}`;
      const response = await fetch(endpoint);
      if (!response.ok) chats = null;
      else {
        const payload = await response.json();
        chats = z.array(chatPreviewResponseSchema).parse(payload);
      }
    } catch {
      chats = null;
    }
  }

  return (
    <html lang="en" suppressHydrationWarning>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <Providers
          chats={chats}
          attribute="class"
          defaultTheme="system"
          enableSystem
          disableTransitionOnChange
        >
          <AppBar />
          <SlotsProvider slots={[chat, edit]}>
            <Chat2Edit />
          </SlotsProvider>
        </Providers>
      </body>
    </html>
  );
}
